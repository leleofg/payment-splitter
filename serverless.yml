service: payment-splitter
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    RESEND_API_KEY: ${env:RESEND_API_KEY, ''}
    AWS_ACCOUNT_REGION: ${env:AWS_ACCOUNT_REGION, ''}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID, ''}
    BUCKET_NAME: ${env:BUCKET_NAME, ''}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:GetQueueAttributes
      Resource: !GetAtt SendEmailQueue.Arn

functions:
  create-group:
    handler: src/modules/group/functions/create-group.handler
    events:
      - httpApi:
          path: /group
          method: post
  add-member-group:
    handler: src/modules/group/functions/add-member-group.handler
    events:
      - httpApi:
          path: /group/add-member
          method: post
  add-expense-group:
    handler: src/modules/group/functions/add-expense-group.handler
    events:
      - httpApi:
          path: /group/add-expense
          method: post
  view-balances:
    handler: src/modules/group/functions/view-balances-group.handler
    events:
      - httpApi:
          path: /group/{groupId}/balances
          method: get
  settle-debt-group:
    handler: src/modules/group/functions/settle-debt-group.handler
    events:
      - httpApi:
          path: /group/settle-debt
          method: post
  upload-expenses-group:
    handler: src/modules/group/functions/upload-expenses-group.handler
    events:
      - httpApi:
          path: /group/upload-expenses
          method: post
          cors: true
          binaryMediaTypes:
            - 'multipart/form-data'
  send-email-consumer:
    handler: src/modules/email/functions/send-email-consumer.run
    events:
      - sqs:
          arn: !GetAtt SendEmailQueue.Arn
          batchSize: 10
plugins:
  - serverless-offline
  - serverless-esbuild
  - serverless-dotenv-plugin

esbuild:
  bundle: true
  minify: false
  sourcemap: true
  target: "node20"
  exclude: 
    - "@aws-sdk/*"
  define: 
    "require.resolve": undefined
  platform: "node"
  concurrency: 10

resources:
  Resources:
    GroupTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: GROUP_TOPIC
    SendEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SEND_EMAIL_QUEUE
    PaymentSplitter:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: "PAY_PER_REQUEST"
          TableName: "PaymentSplitter"
          AttributeDefinitions:
            - AttributeName: "pk"
              AttributeType: "S"
            - AttributeName: "sk"
              AttributeType: "S"
          KeySchema:
            - AttributeName: "pk"
              KeyType: "HASH"
            - AttributeName: "sk"
              KeyType: "RANGE"
    ExpensesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: expenses-payment-splitter-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedHeaders:
                - "*"
    SendEmailQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref GroupTopic
        Endpoint: !GetAtt SendEmailQueue.Arn
    SendEmailQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SendEmailQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "SQS:SendMessage"
              Resource: !GetAtt SendEmailQueue.Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref GroupTopic
        
